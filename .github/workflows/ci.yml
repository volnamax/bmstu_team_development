name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.8'

      - name: Build app
        run: |
          echo "Building Go binary..."
          go mod download
          CGO_ENABLED=0 GOOS=linux go build -o bin/main ./cmd/main.go
          mkdir -p release
          cp bin/main docker-compose.yml docker-compose.prod.yml Dockerfile release/

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: |
            release/
            db_init/

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.8'

      - name: Run unit tests
        run: |
          go test -v ./...
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.59.1
          golangci-lint run || true

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install SSH tools
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to server
        env:
          SSHPASSWORD: ${{ secrets.SSHPASSWORD }}
          SSHHOST: ${{ secrets.SSHHOST }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          echo "$ENV_FILE" > .env
          sshpass -p "$SSHPASSWORD" ssh -o StrictHostKeyChecking=no gitlab-runner@$SSHHOST "mkdir -p ~/app/db_init"
          sshpass -p "$SSHPASSWORD" scp -o StrictHostKeyChecking=no -r release/* .env db_init/* gitlab-runner@$SSHHOST:~/app/
          sshpass -p "$SSHPASSWORD" ssh gitlab-runner@$SSHHOST "cd ~/app && docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d"
