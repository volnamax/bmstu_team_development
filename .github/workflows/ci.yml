image: golang:1.23.8-alpine

stages:
  - build
  - test
  - deploy

build:
  stage: build
  tags:
    - vm2
  script:
    - echo "Building Go binary..."
    - go mod download
    - CGO_ENABLED=0 GOOS=linux go build -o bin/main ./cmd/main.go
    - mkdir -p release
    - cp bin/main docker-compose.yml docker-compose.prod.yml Dockerfile release/
  artifacts:
    paths:
      - release/
      - db_init/
    expire_in: 1 hour

 
unit-tests:
  stage: test
  tags:
    - vm2
  dependencies: 
    - build
  script:
    - echo "Running unit tests..."
    - go test -v ./...
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.59.1
    - golangci-lint run || true
 
deploy-prod:
  stage: deploy
  tags:
    - vm2
  only:
    - main
    - develop
  when: manual 
  before_script:
    - echo "$ENV_FILE" > .env
  script:
    - echo "Deploying to production..."
    - sshpass -p "$SSHPASSWORD" ssh -o StrictHostKeyChecking=no gitlab-runner@$SSHHOST "mkdir -p ~/app/db_init"
    - sshpass -p "$SSHPASSWORD" scp -o StrictHostKeyChecking=no -r release/* .env db_init/* gitlab-runner@$SSHHOST:~/app/
    - sshpass -p "$SSHPASSWORD" ssh gitlab-runner@$SSHHOST "cd ~/app && docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d"
