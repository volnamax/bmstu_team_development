name: Go CI/CD Pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build Go binary
        run: |
          echo "Building Go binary..."
          go mod download
          CGO_ENABLED=0 GOOS=linux go build -o bin/main ./cmd/main.go

  unit-tests:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          go test -v ./...
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.59.1
          golangci-lint run || true
  deploy-prod:
    needs: [build, unit-tests]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to VM1
        env:
          SSHPASS: ${{ secrets.SSHPASSWORD }}
          SSHHOST: ${{ secrets.SSHHOST }}
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "Deploying to production..."
          sshpass -p "$SSHPASS" ssh -o StrictHostKeyChecking=no gitlab-runner@$SSHHOST "
            cd ~/app
            docker system prune -a -f  # Очистка кэша
            docker pull $DOCKER_USER/todolist:latest
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          "
